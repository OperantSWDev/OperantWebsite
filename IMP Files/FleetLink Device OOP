// OOP version of FleetLink DEVICE code
// Randy King 3/2/16
// There are fundamental classes for Data and Interests
// var interestPacket = {
//              'type': "i/",
//              'name' : [null,null,null,null,null,null,null,null,null,null,],
//              'nonce' : "54"
//              }
// but they have methods to express (or build) them as either plain text strings or
// JSON-encoded strings of the underlying table depending on the need of the transport protocol
// JSON is easier to parse for the name components
// HTTP POST works best with a plain string
// the agent device comms works well with a JSON object
// Serial comms to Modbus or LoRa has to be strings
///////////////////  GLOBAL VARIABLES  //////////////////////

local parsedInterestString = []; // An array to put the broken apart interest string into
local parsedDataString = []; // An array used to build the return data packet
local interestString = ""; //keep the single string representation of the interest packet globally
local dataString = ""; //keep the single string representation of the data packet globally
local modbusDataClean = ""; //  keep the data taht the modbus returns
local rangeTimerReference = null;

local newlineChar = 10;
local emptyChar = 0;
local messageFromLoRa = "" ;

////////////////////////  FUNCTIONS  ///////////////////////

//////////Following needed to define whats happens when Imp disconnects from WiFI
// Set the disconnection policy

server.setsendtimeoutpolicy(RETURN_ON_ERROR, WAIT_TIL_SENT, 30);

// Define the disconnection handler function
function disconnectionHandler(reason) {
    if (reason != SERVER_CONNECTED) {
        // Attempt to reconnect in 10 minutes' time
        imp.wakeup(300, reconnect);
    } else {
        //server.log("Device reconnected");
    }
}

// Define the reconnection function

function reconnect() {
    // Attempt to reconnect
    // server.connect calls disconnectHandler() on success or failure
    // with an appropriate reason parameter
    server.connect(disconnectionHandler, 60);
}

// Register the unexpected disconnect handler
server.onunexpecteddisconnect(disconnectionHandler);



//////// General data processing functions///////////

function formModbusCommand(parsedPacketString) {
        // Form a valid Modbus query to write to local equipment
        local hexModbusID = hexConvert(parsedPacketString[3].tointeger(), 1);
        local hexModbusFC = hexConvert(parsedPacketString[4].tointeger(), 1);
        local hexModbusRegister = hexConvert(parsedPacketString[5].tointeger(), 2);
        local hexModbusNumberRegisters = hexConvert(parsedPacketString[6].tointeger(), 2);
        local modbusCommandString = hexModbusID + hexModbusFC + hexModbusRegister + hexModbusNumberRegisters;
        //server.log("modbus command formed: " + modbusCommandString);
        return modbusCommandString
}


function formBaseDataPacketString(interestPacket) {
       // Form the base of data packet to reply with
        local dataString = "d/" +
        interestPacket[1] + "/" +
        interestPacket[2] + "/" +
        interestPacket[3] + "/" +
        interestPacket[4] + "/" +
        interestPacket[5] + "/" + // for test of shorter packet"
        interestPacket[6] + "/" ;
        //server.log("base data string to return is " + dataString)
        return dataString;
}



function agentPacketHandler(packetString) {
    local sourceFace = "agent";
    //server.log("packet received from agent = " + packetString);
    packetHandler(packetString, sourceFace);

}



//////////////////////// AGENT LISTENER  /////////////////////

 agent.on("/agentToDevice", agentPacketHandler);


/////////////////////////  RUNTIME  //////////////////////


function packetHandler(packetString, sourceFace) {
    // function called from any face, any packet type to initiate processing
    local dataPacketString = ""; // this is what we'll return for most cases
    // first parse packet into components
    //server.log("packet handler received: " + packetString);
    local parsedPacketString = split(packetString, "/");

    switch(parsedPacketString[0]) {
        case "i":
            //server.log("interest packet detected from face = " + sourceFace);
            switch (parsedPacketString[1]) { // Which data model?
                case "m": // a local modbus command  can be answered with a modbus query, otherwise broadacst via LoRa
                // Figure out if interest packet is addressed to this IMP
                        local macAddressString = imp.getmacaddress().slice(4,12);
                        //server.log("MAC address = " + macAddressString)
                        if (parsedPacketString[2] == macAddressString) { // have to ignore the first 4 bytes of MAC because of string length constraint..grrr
                                //server.log("interest packet is mine");
                            //server.log("local modbus command detected");
                            local hexModbusCommand = formModbusCommand(parsedPacketString);
                            //server.log("modbus command ready: " + hexModbusCommand);
                            // Write the formed Modbus string out
                            writeModbus(hexModbusCommand);
                            //server.log("modbus write complete: ");
                            //now read the modbus until something is completely received or timeout occurs
                             local modbusReturn = readModbus();
                                //server.log("THE processor received modbus reply of " + modbusReturn + " of length = " + modbusReturn.len());
                                // need to make sure we got enough data bytes back from modbus to satisfy request
                                local numberModbusBytesRequested = 4 * parsedPacketString[6].tointeger();// 2 bytes per 16 bit register + 4 bytes in address
                                //server.log("requested number of data bytes was: " + numberModbusBytesRequested);
                                if (modbusReturn.len() >= numberModbusBytesRequested ) {
                                    local cleanedModbusReturn = modbusReturn.slice(4, 4 + numberModbusBytesRequested); // strip off the unneeded 4 bytes
                                    dataPacketString = formBaseDataPacketString(parsedPacketString) + cleanedModbusReturn;
                                } else {
                                    dataPacketString = formBaseDataPacketString(parsedPacketString) + "4D4F44425553204E41"; // send "No Modbus Reply" if not as long as expected or empty
                                }
                                //server.log("processor formed data packet string of " + dataPacketString + " and length " + dataPacketString.len());
                                switch (sourceFace) {
                                    case "agent":
                                    server.log("device formed data and will return to agent " + dataPacketString + " of length " + dataPacketString.len());
                                    agent.send("deviceToAgent", dataPacketString);
                                    break
                                    case "loRa":
                                    loRaDriver.flush(); // wait until write done
                                    loRaDriver.write(dataPacketString + newlineChar.tochar());
                                    loRaDriver.flush(); // wait until write done
                                            loRaDriver.flush(); // wait until write done
                                            server.log("and was re-broadcast via LoRa");
                                    break
                                    default:
                                    //server.log("unknown source face sent interest packet");
                                }
                        } else {
                                // If the interest packet is addressed to a different MAC address, send it out through the LoRa
                                //server.log("interest packet is NOT mine: " + packetString);
                                switch (sourceFace) {
                                    case "agent":
                                    loRaDriver.flush(); // wait until write done
                                    loRaDriver.write(packetString + newlineChar.tochar());
                                    loRaDriver.flush(); // wait until write done
                                    //server.log("...sent by agent; broadcast via LoRa");
                                    break
                                    case "loRa":
                                    //server.log("...sent by LoRa; forwarding interest packets not implemented");
                                    break
                                    default:
                                 //   server.log("...sent by " + sourceFace "; packet ignored");
                                }
            }
                break
                case "f":
                    //server.log("fleetlink data model interest packets end up here")
                        loRaDriver.flush(); // wait until write done
                        //loRaDriver.write(packetString + newlineChar.tochar());
                        loRaDriver.flush(); // wait until write done
                        //server.log("range interest packet broadcast via LoRa");
                break
                default:
                    //server.log("Error: Data model not implemented");
                }


        break
        case "d": // data packets
            switch (sourceFace) {
                    case "loRa":
                       agent.send("deviceToAgent", packetString); // everything from LoRa goes up to agent
                    break
                    default:
                    //server.log("unknown source face sent this data packet " + sourceFace);
                }
        break
        default:
            //server.log("Failure to parse string = " + parsedPacketString[0]);
    }

}



// FleetLink Modbus functions
// Randy King
// 2/4/2016



// Initializations

    modbusDriver <- hardware.uart12; // Alias the UART12
    modbusDriver.configure(9600, 8, PARITY_NONE, 1, NO_CTSRTS ); // configure UART

    rtsPin <- hardware.pin8; // Modbus hardware driver needs an RTS signal to set output enable
    rtsPin.configure(DIGITAL_OUT,0);

    local modbusOutputBuffer = blob(3); // What will be sent out at next Modbus update
    modbusOutputBuffer[0] = 0xA0;
    modbusOutputBuffer[1] = 0x00;
    modbusOutputBuffer[2] = 0xFF;



////////////////////////////////////////////////////////////////
// HELPER FUNCTIONS
////////////////////////////////////////////////////////////////




// Convert hex STRING to an INTEGER
// From Imp blog
function hexToInteger(hex)
{
    local result = 0;
    local shift = hex.len() * 4;

    // For each digit..
    for(local d=0; d<hex.len(); d++)
    {
        local digit;

        // Convert from ASCII Hex to integer
        if(hex[d] >= 0x61)
            digit = hex[d] - 0x57;
        else if(hex[d] >= 0x41)
             digit = hex[d] - 0x37;
        else
             digit = hex[d] - 0x30;

        // Accumulate digit
        shift -= 4;
        result += digit << shift;
    }

    return result;
}


// Takes a NUMERIC HEX (0x1234) or INT value and returns a STRING len bytes long with HEX values
    function hexConvert(val, len){
    return format("%." + (len*2) + "X", val)
    }



// Calculate the CRC16 needed by Modbus
//  https://gist.github.com/deldrid1/3839697

// blob of CRC values for high–order byte
    const auchCRCHi = "\x00\xC1\x81\x40\x01\xC0\x80\x41\x01\xC0\x80\x41\x00\xC1\x81\x40\x01\xC0\x80\x41\x00\xC1\x81\x40\x00\xC1\x81\x40\x01\xC0\x80\x41\x01\xC0\x80\x41\x00\xC1\x81\x40\x00\xC1\x81\x40\x01\xC0\x80\x41\x00\xC1\x81\x40\x01\xC0\x80\x41\x01\xC0\x80\x41\x00\xC1\x81\x40\x01\xC0\x80\x41\x00\xC1\x81\x40\x00\xC1\x81\x40\x01\xC0\x80\x41\x00\xC1\x81\x40\x01\xC0\x80\x41\x01\xC0\x80\x41\x00\xC1\x81\x40\x00\xC1\x81\x40\x01\xC0\x80\x41\x01\xC0\x80\x41\x00\xC1\x81\x40\x01\xC0\x80\x41\x00\xC1\x81\x40\x00\xC1\x81\x40\x01\xC0\x80\x41\x01\xC0\x80\x41\x00\xC1\x81\x40\x00\xC1\x81\x40\x01\xC0\x80\x41\x00\xC1\x81\x40\x01\xC0\x80\x41\x01\xC0\x80\x41\x00\xC1\x81\x40\x00\xC1\x81\x40\x01\xC0\x80\x41\x01\xC0\x80\x41\x00\xC1\x81\x40\x01\xC0\x80\x41\x00\xC1\x81\x40\x00\xC1\x81\x40\x01\xC0\x80\x41\x00\xC1\x81\x40\x01\xC0\x80\x41\x01\xC0\x80\x41\x00\xC1\x81\x40\x01\xC0\x80\x41\x00\xC1\x81\x40\x00\xC1\x81\x40\x01\xC0\x80\x41\x01\xC0\x80\x41\x00\xC1\x81\x40\x00\xC1\x81\x40\x01\xC0\x80\x41\x00\xC1\x81\x40\x01\xC0\x80\x41\x01\xC0\x80\x41\x00\xC1\x81\x40";
// blob of CRC values for low–order byte
    const auchCRCLo = "\x00\xC0\xC1\x01\xC3\x03\x02\xC2\xC6\x06\x07\xC7\x05\xC5\xC4\x04\xCC\x0C\x0D\xCD\x0F\xCF\xCE\x0E\x0A\xCA\xCB\x0B\xC9\x09\x08\xC8\xD8\x18\x19\xD9\x1B\xDB\xDA\x1A\x1E\xDE\xDF\x1F\xDD\x1D\x1C\xDC\x14\xD4\xD5\x15\xD7\x17\x16\xD6\xD2\x12\x13\xD3\x11\xD1\xD0\x10\xF0\x30\x31\xF1\x33\xF3\xF2\x32\x36\xF6\xF7\x37\xF5\x35\x34\xF4\x3C\xFC\xFD\x3D\xFF\x3F\x3E\xFE\xFA\x3A\x3B\xFB\x39\xF9\xF8\x38\x28\xE8\xE9\x29\xEB\x2B\x2A\xEA\xEE\x2E\x2F\xEF\x2D\xED\xEC\x2C\xE4\x24\x25\xE5\x27\xE7\xE6\x26\x22\xE2\xE3\x23\xE1\x21\x20\xE0\xA0\x60\x61\xA1\x63\xA3\xA2\x62\x66\xA6\xA7\x67\xA5\x65\x64\xA4\x6C\xAC\xAD\x6D\xAF\x6F\x6E\xAE\xAA\x6A\x6B\xAB\x69\xA9\xA8\x68\x78\xB8\xB9\x79\xBB\x7B\x7A\xBA\xBE\x7E\x7F\xBF\x7D\xBD\xBC\x7C\xB4\x74\x75\xB5\x77\xB7\xB6\x76\x72\xB2\xB3\x73\xB1\x71\x70\xB0\x50\x90\x91\x51\x93\x53\x52\x92\x96\x56\x57\x97\x55\x95\x94\x54\x9C\x5C\x5D\x9D\x5F\x9F\x9E\x5E\x5A\x9A\x9B\x5B\x99\x59\x58\x98\x88\x48\x49\x89\x4B\x8B\x8A\x4A\x4E\x8E\x8F\x4F\x8D\x4D\x4C\x8C\x44\x84\x85\x45\x87\x47\x46\x86\x82\x42\x43\x83\x41\x81\x80\x40";




function CRC16 ( puchMsg, usDataLen ){
    //unsigned char *puchMsg ; // message to calculate CRC upon
    //unsigned short usDataLen ; // quantity of bytes in message
    local uchCRCHi = 0xFF ; // high byte of CRC initialized
    local uchCRCLo = 0xFF ; // low byte of CRC initialized
    local uIndex ; // will index into CRC lookup table
    local i = 0;
    while (usDataLen--){ // pass through message buffer
        uIndex = uchCRCLo ^ puchMsg[i] ; // calculate the CRC
        uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
        uchCRCHi = auchCRCLo[uIndex] ;
        i++
    }
    return (uchCRCLo << 8 | uchCRCHi) ;
}






////////////////////////////////////////////////////////////////
// LORA FUNCTIONS
////////////////////////////////////////////////////////////////



function loRaDataAvailable() {  // called when serial data arrives from LoRa
    local loopCounter = 0;
    local loRaReadString = "";
    local loRaByte = 0;
    local dataEverReceivedFlag = false;
         do {
            loRaByte = loRaDriver.read();
            if (loRaByte != -1 ) {
                loRaReadString += loRaByte.tochar(); // don't store -1's indicating empty UART FIFO
                dataEverReceivedFlag = true;  // set true when first actual data has been received by UART
                //server.log("read loop " + loopCounter + " data= " + loRaByte + " data rx flag= " + dataEverReceivedFlag);
                loopCounter = 0; // reset the loop counter, we want to quit read loop when we've received 20000x  -1's in a row with no data
            }
            loopCounter++;

        } while(loopCounter <= 500); // going to block here for 50 reads
            local sourceFace = "loRa";
            packetHandler(loRaReadString, sourceFace);// this line happens when the message is complete., will call handler
}



    loRaDriver <- hardware.uart57; // alias the LoRa serial port
    loRaDriver.configure(9600, 8, PARITY_NONE, 1, NO_CTSRTS, loRaDataAvailable ); // configure UART to callback when serial data arrives from LoRa radio











////////////////////////////////////////////////////////////////
// MODBUS FUNCTIONS
////////////////////////////////////////////////////////////////


function readModbus() {  // Read whatever is in the UART FIFO

    local loopCounter = 0;
    local modbusReadString = "";
    local modbusByte = 0;
    local dataEverReceivedFlag = false;
         do {
            modbusByte = modbusDriver.read();
            if (modbusByte != -1 ) {
                modbusReadString += format("%.2X",modbusByte); // don't store -1's indicating empty UART FIFO
                dataEverReceivedFlag = true;  // set true when first actual data has been received by UART
                loopCounter = 0; // reset the loop counter, we want to quit read loop when we've received 20000x  -1's in a row with no data
            }
            loopCounter++;
            // server.log("read loop " + loopCounter + " data= " + modbusByte + " data rx flag= " + dataEverReceivedFlag);
        } while(loopCounter <= 20000); // going to block here for 20000x reads
        // it would have been better to use a wakeup timer to cancel the read loop, but I couldn't make it work!
    return  modbusReadString;
}


function writeModbus(modbusWriteString) {     // Write the included string to the Modbus, a character at a time
    local modbusWriteBlob = blob(); //set up a local blob for writing to UART
    // The write strng comes in as an even number of hex digits, like this "A0B31F"
    // I should probably write a function to strip any spaces out and make sure the number of characters is even <<-!!
    // we parse this into a blob containing the byte values of each pair of hex digits and write that single byte value to the blob

    for (local stringIndex = 0 ; stringIndex < modbusWriteString.len() ; stringIndex += 2) {
        local blobIndex = stringIndex / 2; // two characters in the hex string equal one value in the blob
        local byteValue = hexToInteger(modbusWriteString.slice(stringIndex, stringIndex+2)); // turn a pair of hex characters into a single byte value
        modbusWriteBlob.writen(byteValue,'b');  // write that byte value into the blob
    }

   // Now we have the blob in writable format, send it to calculate the CRC
    local calculatedCRC = hexConvert(CRC16(modbusWriteBlob, 6),2); // Calculated CRC16 in string form
    local integerCrcHi = hexToInteger(calculatedCRC.slice(0,2)); // need the Hi and Lo bytes in integer form to add to blob for output
    local integerCrcLo = hexToInteger(calculatedCRC.slice(2,4));
    modbusWriteBlob.writen(integerCrcHi,'b');  // write that byte value into the blob
    modbusWriteBlob.writen(integerCrcLo,'b');  // write that byte value into the blob

    // Actually send to UART
    rtsPin.write(1); // raise RTS to enable the Modbus driver
        modbusDriver.write(modbusWriteBlob);
        modbusDriver.flush(); // wait until write done to unassert RTS
    rtsPin.write(0); // lower RTS to change back to receive mode for inverter reply
}
