// OOP version of FleetLink device code
// Randy King 3/5/16


class FleetLink {

    // reserve space for a fleet of 20 units
    settings = array(20, {"serialNumber" : null, "macAddress" : null, "agentURL" : null, "onlineStatus" : null, "position" : {"lat" : null, "lon" : null}})
    thisUnit = null

    function initialize() {
        settings[0] = {"serialNumber" : "A", "macAddress" : "0c2a6909795a",  "position" : {"lat" : 38.490, "lon" : -122.7226}}
        settings[1] = {"serialNumber" : "B", "macAddress" : "0c2a6908cd7e",  "position" : {"lat" : 38.492, "lon" :  -122.721}}
        settings[2] = {"serialNumber" : "C", "macAddress" : "0c2a690a2732",  "position" : {"lat" : 38.491, "lon" :  -122.7135}}
        settings[3] = {"serialNumber" : "D", "macAddress" : "0c2a6904f367",  "position" : {"lat" : 38.4898, "lon" :  -122.7181}}
        settings[4] = {"serialNumber" : "E", "macAddress" : "0c2a690a24e3",  "position" : {"lat" : 38.4882, "lon" :  -122.716}}
        settings[5] = {"serialNumber" : "F", "macAddress" : "0c2a690a2d54",  "position" : {"lat" : 38.495, "lon" :  -122.706}}


    }
}


class GeoCalcs {

    static R = 6371000; // // diameter of earth in meters

    function distanceBetween(iFleetLink, unit1, unit2) {
        // from Haversine formula
        // http://www.movable-type.co.uk/scripts/latlong.html
        // returns distance in meters
        local lat1
        local lon1
        local lat2
        local lon2
        foreach (count, value in iFleetLink.settings) {
            if (iFleetLink.settings[count].serialNumber == unit1) {
                lat1 = iFleetLink.settings[count].position.lat
                lon1 = iFleetLink.settings[count].position.lon
            } else if (iFleetLink.settings[count].serialNumber == unit2){
                lat2 = iFleetLink.settings[count].position.lat
                lon2 = iFleetLink.settings[count].position.lon
            }
        }
        local phi1 = lat1 * PI / 180
        local phi2 = lat2 * PI / 180
        local deltaPhi = (lat2-lat1) * PI / 180
        local deltaLambda = (lon2-lon1) * PI / 180
        local a = math.sin(deltaPhi/2) * math.sin(deltaPhi/2) + math.cos(phi1) * math.cos(phi2) * math.sin(deltaLambda/2) * math.sin(deltaLambda/2)
        local c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))
        local distance = R * c
        //server.log("distance between " + unit1 + " and " + unit2 + " is " + distance)
        return distance

    }


    function calcImprovement(iFleetLink, source, thisUnit, destination) {
        local distanceImproved
        if (source != destination) { // avoid 0 divide
            distanceImproved = distanceBetween(iFleetLink, source, destination) - distanceBetween(iFleetLink, thisUnit, destination)
        } else {
            distanceImproved = 0
        }
        return distanceImproved
    }

}


class Interest {


    static type = "i"
    name = array(20, null) // up to 20 name components
    nonce = null // random number to identify interest unambiguously
    trace = null // in a wireless network we have to track who sent the interest within the interest itself

    static lifetime = 20 // global lifetime of interests in seconds

    function fromTable (iTable) {
        name = iTable.name
        nonce = iTable.nonce
        trace = iTable.trace
    }

    function toTable () {
        local iTable = { "name": name, "nonce": nonce, "trace": trace} //
        return iTable
    }

    function toString () {
        local iString = type + "/"
        for (local i=0; i<name.len(); i++) {
            if (name[i] != null) {
                iString += name[i]
                iString += "/"
            }
        }
        iString += nonce + "/"
        iString += trace
        return iString
    }

    function fromString(iString) {
        local sArray = split(iString, "/")
        local numComponents = sArray.len()
        for(local i = 0; i<name.len(); i++) {
            name[i] = null // clear the name to start
        }
        if (sArray[0] == "i") {
            for (local i = 0; i <  numComponents - 3; i++) {  // take the second through second from last components and make a name form them
                name[i] = sArray[i+1]
            }
            nonce = sArray[numComponents - 2]
            trace = sArray[numComponents -1]

        } else {
            server.log("this is not an Interest string and can't be parsed")
        }
    }

    function toModbusCommand(iInterest) {
        // Form a valid Modbus query to write to local equipment
        local hexModbusID = hexConvert(iInterest.name[2].tointeger(), 1);
        local hexModbusFC = hexConvert(iInterest.name[3].tointeger(), 1);
        local hexModbusRegister = hexConvert(iInterest.name[4].tointeger(), 2);
        local hexModbusNumberRegisters = hexConvert(iInterest.name[5].tointeger(), 2);
        local modbusCommandString = hexModbusID + hexModbusFC + hexModbusRegister + hexModbusNumberRegisters;
        //server.log("modbus command formed: " + modbusCommandString);
        return modbusCommandString
    }
}


class DeviceFace {

    pendingInterestTable = array(10, {"interest" : null, "interface" : null, "httpContext" : null, "timer" : null , "satisfied": null} )
    nextEntryId = 0 // pointer to next place to put a PIT entry


    function addToPIT(sourceFace, httpContext, aInterest) {
        this.pendingInterestTable[nextEntryId] = {"interest" : aInterest, "interface" : sourceFace, "httpContext" : httpContext, "timer" : time() + aInterest.lifetime, "satisfied" : false}         // store this in the pending interest table
        local thisEntryId = nextEntryId
        if (nextEntryId < pendingInterestTable.len()-1) {
            nextEntryId++;
            //server.log("incrementing nextEntryId to " + nextEntryId)
        } else {
            nextEntryId = 0; // start again at 0 if you've filled up the PIT
        }
        return thisEntryId
    }


    ////////////////////// INTEREST HANDLER  //////////////////////////

    function processInterest(interface, iInterest, iFleetLink, iLoRa, iGeoCalcs) {
        if (findMatchingPIT(iInterest) != null) {
            server.log("existing Interest; processInterest terminated")
            server.log("")
        } else {  // It's a new interest..here we go!

            //////////////// DEVELOPMENT ONLY ///////////////////////////////////
            // Units A and C can't hear each other; Unit F can ONLY hear C
                if ((iFleetLink.settings[iFleetLink.thisUnit].serialNumber == "C" && iInterest.trace.slice(iInterest.trace.len()-1) == "A")  ||
                    (iFleetLink.settings[iFleetLink.thisUnit].serialNumber == "A" && iInterest.trace.slice(iInterest.trace.len()-1) == "C")  ||
                    (iFleetLink.settings[iFleetLink.thisUnit].serialNumber == "F" && (iInterest.trace.slice(iInterest.trace.len()-1) != "C") && (iInterest.trace.slice(iInterest.trace.len()-1) != "w"))  ||
                    (iFleetLink.settings[iFleetLink.thisUnit].serialNumber != "C" && iInterest.trace.slice(iInterest.trace.len()-1) == "F")
                ) {
                   server.log("Unit " + iFleetLink.settings[iFleetLink.thisUnit].serialNumber + " ignores Unit " + iInterest.trace + " at " + (hardware.millis() % 10000))
                   server.log("")
                } else {
            //////////////// DEVELOPMENT ONLY ///////////////////////////////////

                local thisEntryId = addToPIT(interface, null, iInterest) // add it to the PIT
                //server.log("Interest destination is unit " + iInterest.name[1] + ", this is unit " + iFleetLink.settings[iFleetLink.thisUnit].serialNumber)
                if (iInterest.name[0] == "m" && iInterest.name[1] == iFleetLink.settings[iFleetLink.thisUnit].serialNumber) {  // is this a local Modbus query?
                    //server.log("this is a local modbus query ")
                    local iModbus = Modbus()
                    iModbus.initialize()
                    local mData = Data()
                    mData = iModbus.query(iInterest)
                    mData.trace = iInterest.trace // start the data object out with the trace of the interest itself
                    processData(mData, iFleetLink, iLoRa, iGeoCalcs)   // you've got your local data, now need to send it on the right path
                } else {
                    iLoRa.sendWithDelay(iInterest, iFleetLink, iGeoCalcs)
                    }
                }
        }
    }


    function processData(mData, iFleetLink, iLoRa, iGeoCalcs) {

        local matchingPITEntryId = findMatchingPIT(mData)

        if ( matchingPITEntryId != null && pendingInterestTable[matchingPITEntryId].satisfied == false) {  // does this data satisfy an unsatisfied pending Interest?


            //////////////// DEVELOPMENT ONLY ///////////////////////////////////
            // Units A and C can't hear each other; Unit F can ONLY hear C
            if ((iFleetLink.settings[iFleetLink.thisUnit].serialNumber == "C" && mData.trace.slice(mData.trace.len()-1) == "A")  ||
                (iFleetLink.settings[iFleetLink.thisUnit].serialNumber == "A" && mData.trace.slice(mData.trace.len()-1) == "C")  ||
                (iFleetLink.settings[iFleetLink.thisUnit].serialNumber == "F" && (mData.trace.slice(mData.trace.len()-1) != "C") && (mData.trace.slice(mData.trace.len()-1) != "w")) ||
                (iFleetLink.settings[iFleetLink.thisUnit].serialNumber != "C" && mData.trace.slice(mData.trace.len()-1) == "F")
            ) {
                server.log("Unit " + iFleetLink.settings[iFleetLink.thisUnit].serialNumber + " ignores Unit " + mData.trace + " at " + (hardware.millis() % 10000))
                server.log("")
            } else {
            //////////////// DEVELOPMENT ONLY ///////////////////////////////////


                //server.log("unsatisfied matching PIT at entry " + matchingPITEntryId)
                switch (pendingInterestTable[matchingPITEntryId].interface) {
                    case "agent":
                        if (mData.trace == "w") { mData.trace = ""} // remove the "w" to save space
                        mData.trace += iFleetLink.settings[iFleetLink.thisUnit].serialNumber // add this units serial number to the trace
                        agent.send("deviceToAgent", mData.toTable())  //send the table version of the item to the agent
                        server.log("Data " + mData.toString() + " returned to agent")
                    break
                    case "loRa":
                        iLoRa.sendWithDelay(mData, iFleetLink, iGeoCalcs)
                        //server.log("Data " + mData.toString() + " forwarded via LoRa")
                    break
                    default:
                        server.log("unrecognized interface from PIT entry")
                    }
                    pendingInterestTable[matchingPITEntryId].satisfied = true // mark it as satisfied so you won't keep forwarding it
                    server.log("marking PIT entry " + matchingPITEntryId + " as satisfied")
                }



        } else {  // there's no matchingPIT or it's a satisfied entry, so discard it
            server.log("Data has no unsatisfied PIT entry; processData terminated")
            server.log("")
        }
    }


    function cleanPIT(entryId){
        // clears the specific entry
        if (entryId != null) {
            pendingInterestTable[entryId].clear()
        }
        // and any expired timer entries as well
        for (local i=0; i <pendingInterestTable.len(); i++) { //
            if (pendingInterestTable[i].rawin("timer")) { // if there is a timer entry
            //server.log("checking PIT[" + i + "]for expired entries..." );
                if (pendingInterestTable[i].timer < time()) {
                    server.log("")
                    server.log("---------------------PIT[" + i + "] has an expired entry which was cleared------------------" );
                    server.log("")
                    server.log("")
                    pendingInterestTable[i].clear()
                }
            }
        }
    }


    function findMatchingPIT (dObject){
        local matchingPITIndex = null
        local matchFlag = false   // set a boolean flag
        for (local i=0; i<pendingInterestTable.len(); i++) {  // look through every interest object in the PIT
            matchFlag = true // if there are any entries to check, start with assumption there is a match....
            if (pendingInterestTable[i].rawin("interest") ){ // can't check without a interest entry
                //server.log("checking PIT Entry = " + i)
                for (local j=0; j<10; j++) {
                    if (pendingInterestTable[i].interest.name[j] != dObject.name[j]) {
                        server.log(pendingInterestTable[i].interest.name[j] + " equals? " +dObject.name[j])
                        //server.log("match failed at name " + j)
                        matchFlag = false // if any of the name components don't match, clear the flag
                        }
                        //server.log("checking name component " + j + " with values " + pendingInterestTable[i].interest.name[j] + " and " + dObject.name[j]);
                    }
                    //server.log("checking PIT entry nonce " + pendingInterestTable[i].interest.nonce + " equals object nonce " + dObject.nonce)
                    if (pendingInterestTable[i].interest.nonce.tostring() != dObject.nonce.tostring()) {  // the nonces must match as well, seems like one was an integer?
                        //server.log("match failed at nonce")
                        matchFlag = false
                    }
                    if (matchFlag == true) {
                        matchingPITIndex = i
                        //server.log("Matching PIT found at index " + i)
                    } else {
                        matchingPITIndex = null
                        //server.log("no matching PIT found")
                    }
            }
        }
    return matchingPITIndex // send back the index of the matching PIT entry
    }


}


class Data {

    static type = "d"
    name = array(20, null)
    nonce = null
    contents = null
    trace = null // in a wireless network we have to track who sent the interest within the interest itself

    function fromTable (dTable) {
        name = dTable.name
        nonce = dTable.nonce
        contents = dTable.contents
        trace = dTable.trace
    }

    function toTable () {
        local dTable = { "name": name, "nonce": nonce, "contents": contents, "trace": trace} //
        return dTable
    }

     function toString () {
        local dString = type + "/"
        for (local i=0; i<name.len(); i++) {
            if (name[i] != null) {
                dString += name[i]
                dString += "/"
            }
        }
        dString += nonce + "/"
        dString += contents + "/"
        dString += trace
        return dString
    }

    function fromString(dString) {
        // the format of the string is type / name[0] / name[1] / ..../ name[9] / nonce / contents / trace
        // where the number of name components is 20 or less
        for(local i = 0; i<name.len(); i++) {
        name[i] = null // clear the name to start
        }

        local sArray = split(dString, "/")
        local numComponents = sArray.len() // this is how many string components we have

        if (sArray[0] == "d") {
            for (local i = 0; i <  numComponents - 4; i++) {  // there will be N-4 name components where N is the number of string components
                name[i] = sArray[i+1] // skip the first string component because it is always "d"
            }
            nonce = sArray[numComponents-3]
            contents = sArray[numComponents-2]
            trace = sArray[numComponents-1]
        } else {
            server.log("this is not a Data string and can't be parsed")
        }
    }

    function fromModbusResponse(dInterest, mString) {
        //server.log("forming data object from " + mString + " of length " + mString.len())
        // this apparently needs some error checking!! <!!!!!!
        if (mString.len() > 6) { // looks like you got a real Modbus reply
            name = dInterest.name
            nonce = dInterest.nonce
            contents = mString.slice(4, mString.len()-6)  // throw away first four and last six characters of modbus response
        } else {  // probably didn't get a reply
            //server.log("no modbus reply")
            name = dInterest.name
            nonce = dInterest.nonce
            contents = "4E6F204D6F64627573" // 4E6F204D6F64627573 ASCII for "NoModbus"
        }
    }
}


class Modbus {

    modbusDriver = null
    rtsPin = null
    outputBuffer = blob(3); // What will be sent out at next Modbus update
    hexModbusID = null
    hexModbusFC = null
    hexModbusRegister = null
    hexModbusNumberRegisters = null


    function initialize() {

        // Modbus Initialization
        modbusDriver = hardware.uart12; // Alias the UART12
        modbusDriver.configure(9600, 8, PARITY_NONE, 1, NO_CTSRTS ); // configure UART
        rtsPin = hardware.pin8; // Imp setup : Modbus hardware driver needs an RTS signal to set output enable
        rtsPin.configure(DIGITAL_OUT,0);

    }

    function writeString(modbusWriteString) {     // Write the included string to the Modbus, a character at a time
        local modbusWriteBlob = blob(); //set up a local blob for writing to UART
        // The write strng comes in as an even number of hex digits, like this "A0B31F"
        // I should probably write a function to strip any spaces out and make sure the number of characters is even <<-!!
        // we parse this into a blob containing the byte values of each pair of hex digits and write that single byte value to the blob

        for (local stringIndex = 0 ; stringIndex < modbusWriteString.len() ; stringIndex += 2) {
            local blobIndex = stringIndex / 2; // two characters in the hex string equal one value in the blob
            local byteValue = hexToInteger(modbusWriteString.slice(stringIndex, stringIndex+2)); // turn a pair of hex characters into a single byte value
            modbusWriteBlob.writen(byteValue,'b');  // write that byte value into the blob
        }

       // Now we have the blob in writable format, send it to calculate the CRC
        local calculatedCRC = hexConvert(CRC16(modbusWriteBlob, 6),2); // Calculated CRC16 in string form
        local integerCrcHi = hexToInteger(calculatedCRC.slice(0,2)); // need the Hi and Lo bytes in integer form to add to blob for output
        local integerCrcLo = hexToInteger(calculatedCRC.slice(2,4));
        modbusWriteBlob.writen(integerCrcHi,'b');  // write that byte value into the blob
        modbusWriteBlob.writen(integerCrcLo,'b');  // write that byte value into the blob

        // Actually send to UART
        rtsPin.write(1); // raise RTS to enable the Modbus driver
            modbusDriver.write(modbusWriteBlob);
            modbusDriver.flush(); // wait until write done to unassert RTS
        rtsPin.write(0); // lower RTS to change back to receive mode for inverter reply
    }

    function readString() {  // Read whatever is in the UART FIFO

        local modbusReadString = "";
        local modbusByte = 0;
        local dataEverReceivedFlag = false;
        local modbusTimeout = 100 // how long to read before giving up on Modbus read
        local readTimer = hardware.millis();
             while ((hardware.millis() - readTimer) < modbusTimeout) {
                modbusByte = modbusDriver.read();
                if (modbusByte != -1 ) {
                    modbusReadString += format("%.2X",modbusByte); // don't store -1's indicating empty UART FIFO
                    dataEverReceivedFlag = true;  // set true when first actual data has been received by UART
                }
                // server.log("read loop " + loopCounter + " data= " + modbusByte + " data rx flag= " + dataEverReceivedFlag);
            }
        return  modbusReadString;
    }

    function query(qInterest) {
        local wString =  qInterest.toModbusCommand(qInterest)
        //server.log("Modbus write " + wString + " at " + (hardware.millis() % 10000))
        writeString(wString)
        //server.log("Modbus write complete at " + (hardware.millis() % 10000))
        local rString = readString()
        //server.log("Modbus read complete" + rString + " at " + (hardware.millis() % 10000))
        local qData = Data()
        qData.fromModbusResponse(qInterest, rString)
        return qData
    }
}


class LoRa {

    static symbolPeriod = 16 // in milliseconds. must change to match radio settings
    static delayQuanta = 4 // minimum number of symbol periods per time delay step, don't change


    // called when serial data arrives from LoRa
    function readString() {
        local loopCtr = 0;
        local rString = "";
        local rByte = 0;
        local dataEverReceivedFlag = false;
        //server.log("LoRa data available, loRaDriver = " + loRaDriver)
             do {
                rByte = loRaDriver.read();
                if (rByte != -1 && rByte != 10) {
                    rString += rByte.tochar(); // don't store -1's indicating empty UART FIFO or 10, which is termination /N
                    dataEverReceivedFlag = true;  // set true when first actual data has been received by UART
                    loopCtr = 0; // reset the loop counter, we want to quit read loop when we've received N  -1's in a row with no data
                }
                loopCtr++;

            } while(loopCtr <= 100); // going to block here for 50 reads
            //server.log("LoRa reception of " + rString + " of size " + rString.len())

        return rString
    }

    function sendWithDelay(objectToSend, iFleetLink, iGeoCalcs) {
        local txDelay
        local minDelay = 3; // minimum delay of any TX at all
        //server.log("entering sendWithDelay at " + (hardware.millis() % 10000))
        // if this object was sourced from this unit then send immediately
        // this is the case for Interests that just came from the agent (first case)
        // or Datas that were generated by the local Modbus (2nd case)
        //server.log("considering delay for trace= " +objectToSend.trace + " and generated by " + objectToSend.name[1])
        //if (objectToSend.trace == "w" || objectToSend.name[1] == iFleetLink.settings[iFleetLink.thisUnit].serialNumber) {
        if (objectToSend.trace == "w") {
            objectToSend.trace = iFleetLink.settings[iFleetLink.thisUnit].serialNumber // replace the "w" with this units serial number in the trace
            server.log("this is new Interest from agent, transmitting immediately")
            txDelay = minDelay
            sendLoRa(objectToSend, iFleetLink, txDelay)

        } else if (objectToSend.name[1] == iFleetLink.settings[iFleetLink.thisUnit].serialNumber) {
            objectToSend.trace += iFleetLink.settings[iFleetLink.thisUnit].serialNumber // add this units serial number to the trace
            server.log("this is Data from local Modbus, transmitting immediately")
            txDelay = minDelay
            sendLoRa(objectToSend, iFleetLink, txDelay)

        } else {  // or wait a random amount of time to forward a non-local object

            local sourceSerialNumber = objectToSend.trace.slice(objectToSend.trace.len()-1) // the sending unit is always the last serialnumber on trace
            local thisSerialNumber = iFleetLink.settings[iFleetLink.thisUnit].serialNumber

            // this next section needs to be different for interests and data
            local destinationSerialNumber = null
            if (objectToSend.type == "i") {
                destinationSerialNumber = objectToSend.name[1] // an interest's target is in the name
                //server.log("this is an Interest from Unit " + sourceSerialNumber + " with destination Unit " + destinationSerialNumber + " with trace " + objectToSend.trace)
            } else if (objectToSend.type == "d") {
                destinationSerialNumber = objectToSend.trace.slice(0,1) // a data object is going back to the original sender
                //server.log("this is a Data from Unit " + sourceSerialNumber + " with destination Unit " + destinationSerialNumber + " with trace " + objectToSend.trace)

            } else {
                server.log("unknown object from Unit " + sourceSerialNumber + " with trace " +  objectToSend.trace)
            }

            // This next part is the meat of the NDN behavior

            // this minimum delay for a forwarding unit needs to be at least 100ms for the Modbus to reply or timeout, then 100 ms more for variability
            // otherwise a forwarding unit may trump a local responder, whcih is wrong!
            local localResponseDelay = (200/(symbolPeriod * delayQuanta)).tofloat()

             // we may add delay based on location and a random component, depending on logic below
            local randomDelay = null
            local geolocationDelay = null

            // Interests are forwarded using a geolocation FOM, since they are probing outward into unknown terrritory (assuming we want a stateless network)

            // the delay portion based on distance made good should be the bulk of the delay.  40 quanta seems to avoid most collisions in small networks
            local wirelessRange = 1000
            local distanceImproved = iGeoCalcs.calcImprovement(iFleetLink, sourceSerialNumber, thisSerialNumber, destinationSerialNumber)
            local geolocationDelay = 40 * (wirelessRange - distanceImproved)/wirelessRange
            if (geolocationDelay < 0) {
                geolocationDelay = 0
            } else if (geolocationDelay > 40) {
                geolocationDelay = 40
            }

            // I also add 3 quanta maximum of random delay to avoid deterministic collisions
            randomDelay = irand(300).tofloat() / 100


            // Datas, however, come back most effectively using the breadcrumbs of the outgoing trace to re-trace their Interest's steps
            // However, if that fails for some reason, other units can forward Datas back using the same geolocation strategy the Interest used
            // Therefore, we calculate the geoforwarding numbers for everything, then zero them out if this is a retrace
            //server.log("this is an object of type " + objectToSend.type )
            if (objectToSend.type == "d") {
                for (local i=0; i < objectToSend.trace.len(); i++) {  // look through the whole trace
                //server.log(" looking at trace index " + i + " which is unit " + objectToSend.trace.slice(i,i+1))
                    if (objectToSend.trace.slice(i,i+1) ==  objectToSend.name[1]) { // find the target unit (end point) in the trace
                        //server.log("target in trace is " + objectToSend.trace.slice(i,i+1) + " at index " + i)
                        for (local j=0; j<i; j++) {
                            if (objectToSend.trace.slice(j,j+1) ==  thisSerialNumber) { // did the Interest visit this unit on its way to the target?
                                //server.log("visited this unit " + objectToSend.trace.slice(j,j+1) + " before at index " + j)
                                if (objectToSend.trace.slice(j+1,j+2) == sourceSerialNumber) { // if so, did this unit forward it to the unit thats now sending it back?
                                    // if all this logic is satisfied, this Data is retracing its steps and should be forwarded ASAP
                                    //server.log("at that time it went on to unit " + objectToSend.trace.slice(j+1,j+2) + " at index " + (j+1))
                                    randomDelay = 0
                                    geolocationDelay = 0
                                }
                            }
                        }
                    }
                }
            }
            txDelay = minDelay + localResponseDelay + geolocationDelay + randomDelay
            txDelay = txDelay.tointeger()

            objectToSend.trace += thisSerialNumber // add this units serial number to the trace
            server.log("it will be forwarded with delay = " + txDelay + " from min " + minDelay + " plus response " + localResponseDelay + " plus geolocation " + geolocationDelay + " random " + randomDelay) //
            sendLoRa(objectToSend, iFleetLink, txDelay)
        }
    }

}





//////////////////////  INITIALIZATIONS  //////////////////////////

    local aFace = DeviceFace() //does it need an intialize function


    // Get the FleetLink fleet information
    local aFleetLink = FleetLink()
    aFleetLink.initialize();

    foreach (count, value in aFleetLink.settings) {
        if (aFleetLink.settings[count].macAddress == imp.getmacaddress()) {
            aFleetLink.thisUnit = count
            server.log("Booting unit with serial number " + aFleetLink.settings[aFleetLink.thisUnit].serialNumber + " with MAC " + aFleetLink.settings[aFleetLink.thisUnit].macAddress)
        }

    }


    local aGeoCalcs = GeoCalcs


    local aLoRa = LoRa()
    function loRaAvailable() {
        local lString = aLoRa.readString()
        //server.log(lString  + " received from LoRa at " + (hardware.millis() % 10000))

            if (lString.len() > 0) {
                switch (lString.slice(0,1)){
                case "i":
                    local lInterest = Interest()
                    lInterest.fromString(lString)
                    server.log("LoRa received an Interest " + lString + " at " + (hardware.millis() % 10000))
                    aFace.processInterest("loRa", lInterest, aFleetLink, aLoRa, aGeoCalcs)

                break
                case "d":
                    //server.log("LoRa received a Data " + lString)
                    local lData = Data()
                    lData.fromString(lString)
                    server.log("LoRa received a Data " + lString + " at " + (hardware.millis() % 10000))
                    aFace.processData(lData, aFleetLink, aLoRa, aGeoCalcs)
                break
                default:
                    server.log("LoRa received an unknown transmission " + lString + " at " + (hardware.millis() % 10000))
                }
            } else {
                server.log("LoRa received a zero length transmission " + lString + " at " + (hardware.millis() % 10000))

            }

    }


    loRaDriver <- hardware.uart57; // alias the LoRa serial port
    loRaDriver.configure(115200, 8, PARITY_NONE, 1, NO_CTSRTS, loRaAvailable ); // configure UART to callback when serial data arrives from LoRa radio

    function sendLoRa(objectToSend, iFleetLink, txDelay) {
        local newLineChar = 10
        local stringToSend = objectToSend.toString()
        loRaDriver.write(format("%.2u",txDelay) + stringToSend + newLineChar.tochar())
        loRaDriver.flush(); // wait until write done
        server.log("LoRA transmission of " + stringToSend + " complete in timeslot " + txDelay + " at " + (hardware.millis() % 10000))
        server.log("")
    }

//////////////////////  RUN TIME EVENT REGISTRATION  //////////////////////////

    //agent.on("sendSettings", loadFleetLink)
    //agent.send("requestSettings", null) // ask for settings

//////////////////////  AGENT COMMS HANDLER  //////////////////////////

    function receivedAgentInterest(iTable) {
        local aInterest = Interest()
        aInterest.fromTable(iTable)
        server.log("Interest " + aInterest.toString() + " received from agent")
        aFace.processInterest("agent", aInterest, aFleetLink, aLoRa, aGeoCalcs)
    }

    agent.on("agentToDevice", receivedAgentInterest);


//////////////////////  DEVICE DISCONNECTION HANDLER  //////////////////////////

    function reconnect() {
        // server.connect calls disconnectHandler() on success or failure
        // with an appropriate reason parameter
        server.connect(disconnectionHandler, 60);
    }

    // Define the disconnection handler function
    function disconnectionHandler(reason) {
        if (reason != SERVER_CONNECTED) {
            imp.wakeup(300, reconnect)             // Attempt to reconnect in 5 minutes' time
        } else {
            //server.log("Device reconnected");
        }
    }

    // Set the disconnection policy
    server.setsendtimeoutpolicy(RETURN_ON_ERROR, WAIT_TIL_SENT, 30);

    // Register the unexpected disconnect handler
    server.onunexpecteddisconnect(disconnectionHandler);




//////////////////////  BACKGROUND TASK TO CLEAN UP PIT  //////////////////////////

    function checkExpiredPIT() {
        aFace.cleanPIT(null)
        imp.wakeup(1, checkExpiredPIT) ;   // remove expire interests from PIT
    }

     checkExpiredPIT(); // start PIT cleaner running




//////////////////////  HELPER FUNCTIONS  ///////////////////////////////////

    // Convert hex STRING to an INTEGER
    function hexToInteger(hex) {
        local result = 0;
        local shift = hex.len() * 4;

        // For each digit..
        for(local d=0; d<hex.len(); d++) {
            local digit;
            // Convert from ASCII Hex to integer
            if(hex[d] >= 0x61)
                digit = hex[d] - 0x57;
            else if(hex[d] >= 0x41)
                 digit = hex[d] - 0x37;
            else
                 digit = hex[d] - 0x30;
            // Accumulate digit
            shift -= 4;
            result += digit << shift;
        }
        return result;
    }

    // Takes a NUMERIC HEX (0x1234) or INT value and returns a STRING len bytes long with HEX values
    function hexConvert(val, len){
        return format("%." + (len*2) + "X", val)
        }

    // Calculate the CRC16 needed by Modbus   https://gist.github.com/deldrid1/3839697
    function CRC16 ( puchMsg, usDataLen ){
        const auchCRCHi = "\x00\xC1\x81\x40\x01\xC0\x80\x41\x01\xC0\x80\x41\x00\xC1\x81\x40\x01\xC0\x80\x41\x00\xC1\x81\x40\x00\xC1\x81\x40\x01\xC0\x80\x41\x01\xC0\x80\x41\x00\xC1\x81\x40\x00\xC1\x81\x40\x01\xC0\x80\x41\x00\xC1\x81\x40\x01\xC0\x80\x41\x01\xC0\x80\x41\x00\xC1\x81\x40\x01\xC0\x80\x41\x00\xC1\x81\x40\x00\xC1\x81\x40\x01\xC0\x80\x41\x00\xC1\x81\x40\x01\xC0\x80\x41\x01\xC0\x80\x41\x00\xC1\x81\x40\x00\xC1\x81\x40\x01\xC0\x80\x41\x01\xC0\x80\x41\x00\xC1\x81\x40\x01\xC0\x80\x41\x00\xC1\x81\x40\x00\xC1\x81\x40\x01\xC0\x80\x41\x01\xC0\x80\x41\x00\xC1\x81\x40\x00\xC1\x81\x40\x01\xC0\x80\x41\x00\xC1\x81\x40\x01\xC0\x80\x41\x01\xC0\x80\x41\x00\xC1\x81\x40\x00\xC1\x81\x40\x01\xC0\x80\x41\x01\xC0\x80\x41\x00\xC1\x81\x40\x01\xC0\x80\x41\x00\xC1\x81\x40\x00\xC1\x81\x40\x01\xC0\x80\x41\x00\xC1\x81\x40\x01\xC0\x80\x41\x01\xC0\x80\x41\x00\xC1\x81\x40\x01\xC0\x80\x41\x00\xC1\x81\x40\x00\xC1\x81\x40\x01\xC0\x80\x41\x01\xC0\x80\x41\x00\xC1\x81\x40\x00\xC1\x81\x40\x01\xC0\x80\x41\x00\xC1\x81\x40\x01\xC0\x80\x41\x01\xC0\x80\x41\x00\xC1\x81\x40";
        const auchCRCLo = "\x00\xC0\xC1\x01\xC3\x03\x02\xC2\xC6\x06\x07\xC7\x05\xC5\xC4\x04\xCC\x0C\x0D\xCD\x0F\xCF\xCE\x0E\x0A\xCA\xCB\x0B\xC9\x09\x08\xC8\xD8\x18\x19\xD9\x1B\xDB\xDA\x1A\x1E\xDE\xDF\x1F\xDD\x1D\x1C\xDC\x14\xD4\xD5\x15\xD7\x17\x16\xD6\xD2\x12\x13\xD3\x11\xD1\xD0\x10\xF0\x30\x31\xF1\x33\xF3\xF2\x32\x36\xF6\xF7\x37\xF5\x35\x34\xF4\x3C\xFC\xFD\x3D\xFF\x3F\x3E\xFE\xFA\x3A\x3B\xFB\x39\xF9\xF8\x38\x28\xE8\xE9\x29\xEB\x2B\x2A\xEA\xEE\x2E\x2F\xEF\x2D\xED\xEC\x2C\xE4\x24\x25\xE5\x27\xE7\xE6\x26\x22\xE2\xE3\x23\xE1\x21\x20\xE0\xA0\x60\x61\xA1\x63\xA3\xA2\x62\x66\xA6\xA7\x67\xA5\x65\x64\xA4\x6C\xAC\xAD\x6D\xAF\x6F\x6E\xAE\xAA\x6A\x6B\xAB\x69\xA9\xA8\x68\x78\xB8\xB9\x79\xBB\x7B\x7A\xBA\xBE\x7E\x7F\xBF\x7D\xBD\xBC\x7C\xB4\x74\x75\xB5\x77\xB7\xB6\x76\x72\xB2\xB3\x73\xB1\x71\x70\xB0\x50\x90\x91\x51\x93\x53\x52\x92\x96\x56\x57\x97\x55\x95\x94\x54\x9C\x5C\x5D\x9D\x5F\x9F\x9E\x5E\x5A\x9A\x9B\x5B\x99\x59\x58\x98\x88\x48\x49\x89\x4B\x8B\x8A\x4A\x4E\x8E\x8F\x4F\x8D\x4D\x4C\x8C\x44\x84\x85\x45\x87\x47\x46\x86\x82\x42\x43\x83\x41\x81\x80\x40";

        //unsigned char *puchMsg ; // message to calculate CRC upon
        //unsigned short usDataLen ; // quantity of bytes in message
        local uchCRCHi = 0xFF ; // high byte of CRC initialized
        local uchCRCLo = 0xFF ; // low byte of CRC initialized
        local uIndex ; // will index into CRC lookup table
        local i = 0;
        while (usDataLen--){ // pass through message buffer
            uIndex = uchCRCLo ^ puchMsg[i] ; // calculate the CRC
            uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
            uchCRCHi = auchCRCLo[uIndex] ;
            i++
        }
        return (uchCRCLo << 8 | uchCRCHi) ;
    }


    function irand(max) {
        // Generate a pseudo-random integer between 0 and max
        local roll = (1.0 * math.rand() / RAND_MAX) * (max + 1);
        return roll.tointeger();
    }
